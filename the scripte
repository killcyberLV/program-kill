import subprocess
import time
import os
from datetime import datetime

import requests
import webbrowser

# Your local version variable (example)
v = "11"  # or whatever your current version content is

# URL to fetch the raw .v file from GitHub
raw_url = "https://github.com/killcyberLV/program-kill/blob/main/.v%20(1.1)"

def check_for_update():
    try:
        response = requests.get(raw_url)
        response.raise_for_status()  # Raise error for bad status
        remote_version = response.text.strip()

        if remote_version != v:
            print("new version")
            webbrowser.open("https://github.com/killcyberLV/program-kill/blob/main/.v%20(1.1)")
        else:
            print("version up to date")

    except requests.RequestException as e:
        print("Failed to check for update:", e)

# Run the check
check_for_update()

def open_login_file_with_default_app():
    path = login_file_path()
    if os.path.exists(path):
        os.startfile(path)  # This will open the file in the default associated program (Windows only)
    else:
        print("Login file does not exist.")

print("program killer v1.0")
print("")

BLOCKED_KEYWORDS = [
    "matriarch",
    "iso_4234",
    "iqigu_8029",
    "rothery",
    "camus",
    "superconducting"
]

BLOCKED_KEYWORDS = [kw.lower() for kw in BLOCKED_KEYWORDS]

def get_desktop_path():
    return os.path.join(os.path.expanduser("~"), "Desktop")

def login_file_path():
    return os.path.join(get_desktop_path(), "login.txt")

def ensure_login_file():
    path = login_file_path()
    if not os.path.exists(path):
        with open(path, "w") as f:
            f.write("Login file created\n")

def log_kill_event(info):
    ensure_login_file()
    path = login_file_path()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(path, "a") as f:
        f.write(f"{timestamp} - Killed: {info}\n")

def get_bad_processes():
    result = subprocess.run(
        ["wmic", "process", "get", "ProcessId,CommandLine"],
        capture_output=True,
        text=True
    )
    lines = result.stdout.lower().splitlines()
    matched = []

    for line in lines:
        for keyword in BLOCKED_KEYWORDS:
            if keyword in line:
                parts = line.strip().split()
                if parts and parts[-1].isdigit():
                    pid = parts[-1]
                    matched.append((pid, line))

    return matched

def kill_bad_processes():
    matched = get_bad_processes()
    for pid, line in matched:
        subprocess.run(["taskkill", "/f", "/pid", pid],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL)
        print(f"     Killed PID {pid} | {line}")
        log_kill_event(f"PID {pid}")

def show_bad_processes():
    matched = get_bad_processes()
    if not matched:
        print("     No banned processes running.")
    else:
        print("     Banned processes running:")
        for pid, line in matched:
            print(f"PID: {pid} | {line}")

if __name__ == "__main__":
    while True:
        user_input = input("Enter command (help to see commands): ").strip().lower()
        if user_input == "kill":
            kill_bad_processes()
        elif user_input == "show":
            show_bad_processes()
        elif user_input == "exit":
            break
        elif user_input == "help":
            print("     !!important!! dont just go to the cmd and copy past right clike and see in file (pute the two in case)")
            print("     kill      - Stop every BG and FG banned keyword process")
            print("     show      - Show every BG and FG banned keyword process")
            print("     exit      - Exit the program")
            print("     reapetkill - Repeat kill banned processes infinitely")
            print("     reapetinfo - have info for reapetkill command")
            print("     enterlog - enter the log file")
            time.sleep(1)
        elif user_input == "reapetkill":
            print("restarte the program to stop (if ther is nothing mean that the ban app is not running yet)")
            while True:
                    kill_bad_processes()
                    time.sleep(3)
        elif user_input == "reapetinfo":
            print("     if you see nothing its normal it mean the ban app is nto running or inactive")
            print("     if in one minute the kill count is more than 30000 get an antivirus, keep using this to avoid expending it")
        elif user_input == "enterlog":
            open_login_file_with_default_app
        else:
            print("Unknown command.")
